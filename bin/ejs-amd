#!/usr/bin/env node

var fs      = require("fs"),
    program = require("commander"),
    path    = require("path"),
    mkdirp  = require("mkdirp"),
    ejs     = require("ejs"),
    ejsamd  = require("../lib/");

program
  .version(require("../package.json").version)
  .usage("[options] [dir|file ...]")
  .option("-f, --from <dir>", "dir to look for ejs templates in")
  .option("-t, --to <dir>",  "output the compiled js to <dir>")
  .option("-d, --compileDebug", "set the compileDebug flag to TRUE")
  .option("-o, --open <otag>", "set the open tag to <otag>")
  .option("-c, --close <ctag>", "set the close tag to <ctag>");

program.parse(process.argv);


// check that we have both from and to
if (!program.from && !program.to) {
  console.log('Both "--from" and "--to" are required');
  process.exit(1);
}


// print out some blank lines around the output
console.log();
process.on("exit", console.log);

var finder = require("walkdir").walk(program.from);

finder.on("file", function (file) {
  var suffixRe = /\.ejs$/;
  if ( suffixRe.test(file) ) {
    var toPath = path.resolve(".", program.to, path.basename(file, '.ejs') + ".js");
    renderFile(file, toPath );
  }
});

finder.on("error", function(err) {
  console.log('ERROR reading:' + err);
});

function renderFile(fromPath, toPath) {
  fs.readFile(fromPath, "utf8", function(err, str){
    if (err) throw err;

    var options = {
      client: true,
      filename: fromPath,
      compileDebug: program.compileDebug === true
    };

    if (typeof program.open === "string"){
      options.open = program.open;
    }

    if (typeof program.close === "string"){
      options.close = program.close;
    }

    var fn = ejs.compile(str, options).toString();
    var dir = path.resolve(path.dirname(toPath));

    mkdirp(dir, 0755, function(err){
      if (err) throw err;
      var amdOutput = ejsamd.wrapAmd(fn);
      fs.writeFile(toPath, amdOutput, function(err){
        if (err) throw err;
        console.log("  \033[90mejs -> AMD js: \033[36m%s\033[0m", toPath);
      });
    });
  });
}
